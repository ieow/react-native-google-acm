name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    types:
      - checks_requested

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint files
        run: yarn lint

      - name: Typecheck files
        run: yarn typecheck

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run unit tests
        run: yarn test --maxWorkers=2 --coverage

  build-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: yarn prepare

  build-android:
    runs-on: ubuntu-latest
    env:
      TURBO_CACHE_DIR: .turbo/android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          # 1. Run turbo and capture the JSON output
          #    Using || true to prevent workflow failure if turbo fails, error handled below
          TURBO_JSON_OUTPUT=$(yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json || true)

          # Check if the command produced any output
          if [[ -z "$TURBO_JSON_OUTPUT" ]]; then
            echo "::error::Failed to get JSON output from 'yarn turbo run build:android --dry=json'."
            # Decide if you want to exit here or just report MISS
            # exit 1 # uncomment to fail the step
            echo "Assuming cache MISS due to error."
            TURBO_CACHE_STATUS="MISS" # Or "ERROR"
          else
            # 2. Parse the captured JSON with node -p
            #    Use optional chaining (?.) for robustness against missing fields/tasks
            #    Handle potential errors during parsing
            TURBO_CACHE_STATUS=$(node -p "try { (${TURBO_JSON_OUTPUT})?.tasks?.find(t => t.task === 'build:android')?.cache?.status } catch (e) { 'ERROR_PARSING' }")

            # Check if parsing failed or status is undefined/null
            if [[ -z "$TURBO_CACHE_STATUS" || "$TURBO_CACHE_STATUS" == "undefined" || "$TURBO_CACHE_STATUS" == "null" || "$TURBO_CACHE_STATUS" == "ERROR_PARSING" ]]; then
               echo "::warning::Could not determine Turbo cache status for build:android. Raw output:"
               echo "$TURBO_JSON_OUTPUT"
               echo "Assuming cache MISS due to parsing issue."
               TURBO_CACHE_STATUS="MISS" # Or "UNKNOWN"
            fi
          fi

          echo "Turborepo Cache Status for build:android: $TURBO_CACHE_STATUS"

          # 3. Check the status and set the environment variable
          if [[ "$TURBO_CACHE_STATUS" == "HIT" ]]; then
            echo "Cache HIT detected."
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          else
            echo "Cache status is not HIT ($TURBO_CACHE_STATUS)."
            echo "turbo_cache_hit=0" >> $GITHUB_ENV # Optional: explicitly set to 0
          fi

      - name: Install JDK
        if: env.turbo_cache_hit != 1
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('example/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example for Android
        env:
          JAVA_OPTS: "-XX:MaxHeapSize=6g"
        run: |
          yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}"

  build-ios:
    runs-on: macos-latest
    env:
      TURBO_CACHE_DIR: .turbo/ios
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache turborepo for iOS
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-ios-

      - name: Check turborepo cache for iOS
        run: |
          # 1. Run turbo and capture the JSON output
          #    Using || true to prevent workflow failure if turbo fails, error handled below
          TURBO_JSON_OUTPUT=$(yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json || true)

          # Check if the command produced any output
          if [[ -z "$TURBO_JSON_OUTPUT" ]]; then
            echo "::error::Failed to get JSON output from 'yarn turbo run build:ios --dry=json'."
            # Decide if you want to exit here or just report MISS
            # exit 1 # uncomment to fail the step
            echo "Assuming cache MISS due to error."
            TURBO_CACHE_STATUS="MISS" # Or "ERROR"
          else
            # 2. Parse the captured JSON with node -p
            #    Use optional chaining (?.) for robustness against missing fields/tasks
            #    Handle potential errors during parsing
            TURBO_CACHE_STATUS=$(node -p "try { (${TURBO_JSON_OUTPUT})?.tasks?.find(t => t.task === 'build:ios')?.cache?.status } catch (e) { 'ERROR_PARSING' }")

            # Check if parsing failed or status is undefined/null
            if [[ -z "$TURBO_CACHE_STATUS" || "$TURBO_CACHE_STATUS" == "undefined" || "$TURBO_CACHE_STATUS" == "null" || "$TURBO_CACHE_STATUS" == "ERROR_PARSING" ]]; then
               echo "::warning::Could not determine Turbo cache status for build:ios. Raw output:"
               echo "$TURBO_JSON_OUTPUT"
               echo "Assuming cache MISS due to parsing issue."
               TURBO_CACHE_STATUS="MISS" # Or "UNKNOWN"
            fi
          fi

          echo "Turborepo Cache Status for build:ios: $TURBO_CACHE_STATUS"

          # 3. Check the status and set the environment variable
          if [[ "$TURBO_CACHE_STATUS" == "HIT" ]]; then
            echo "Cache HIT detected."
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          else
            echo "Cache status is not HIT ($TURBO_CACHE_STATUS)."
            echo "turbo_cache_hit=0" >> $GITHUB_ENV # Optional: explicitly set to 0
          fi

      - name: Restore cocoapods
        if: env.turbo_cache_hit != 1
        id: cocoapods-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Install cocoapods
        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
        run: |
          cd example/ios
          pod install
        env:
          NO_FLIPPER: 1

      - name: Cache cocoapods
        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ steps.cocoapods-cache.outputs.cache-key }}

      - name: Build example for iOS
        run: |
          yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}"
